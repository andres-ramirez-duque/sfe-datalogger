name: Build DataLogger Firmware Action
on: 
  workflow_dispatch:
    branches: 

jobs:
  build:
    
    name: Build DataLogger IoT
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo and submodules
        uses: actions/checkout@v3
        
      # setup the ssh key used to pull in the Flux submodule source. This was the
      # only way found to make this work when using private models (ssh private key here, public on Flux deploy keys
      - name: Et Tu Submodule
        uses: webfactory/ssh-agent@master
        with:
          ssh-private-key: |
            ${{ secrets.FLUX_PULL_KEY_2 }}
      
      # checkout flux
      - name: Checkout Flux submodule
        run: git submodule update --init --recursive

      # Setup Arduino command line - install esp32 and all the libs flux needs
      - name: Arduino - Install and setup the Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Arduino - Start config file
        run: arduino-cli config init --additional-urls "https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json"

      - name: Arduino - Update index
        run: arduino-cli core update-index

      # Install ESP32 
      - name: Arduino - Install ESP32 platform
        run: arduino-cli core install esp32:esp32

      # install the libraries Flux uses
      - name: Install Flux dependant libraries.
        run: ./SparkFun_Flux/install-libs.sh

      # Compile time - build the Firmware for the data logger.
      # Note:
      #   - The use of a full path to flux - this is needed or the build fails (relative paths get merged).
      #   - We are providing a custom partition structure for the ESP32
      
      - name: Compile DataLogger firmware binary
        run: arduino-cli compile --fqbn esp32:esp32:esp32 ./sfeDataLoggerIoT/sfeDataLoggerIoT.ino 
            --build-property build.partitions=partitions --build-property upload.maximum_size=3145728 
            --export-binaries --clean --library `pwd`/SparkFun_Flux 

      - name: Rename Library
        run: |
          cd sfeDataLoggerIoT/build/esp32.esp32.esp32/
          ls -la
          mv sfeDataLoggerIoT.ino.bin SparkFun_DataLoggerIoT.bin
          
      - uses: actions/upload-artifact@v3
        with:
          name: SparkFun_DataLoggerIoT.bin
          path: sfeDataLoggerIoT/build/esp32.esp32.esp32/SparkFun_DataLoggerIoT.bin
          
      # - name: Compile Sketch
      #   run: arduino-cli compile --fqbn esp32:esp32:esp32 ./Firmware/RTK_Surveyor/RTK_Surveyor.ino
      #     --build-property build.partitions=partitions
      #     --build-property upload.maximum_size=3145728 
      #     --build-property "compiler.cpp.extra_flags=\"-DPOINTPERFECT_TOKEN=$POINTPERFECT_TOKEN\" \"-DFIRMWARE_VERSION_MAJOR=$FIRMWARE_VERSION_MAJOR\" \"-DFIRMWARE_VERSION_MINOR=$FIRMWARE_VERSION_MINOR\" \"-DENABLE_DEVELOPER=${{ env.ENABLE_DEVELOPER }}\""
      #     --export-binaries

      # - name: Rename binary
      #   run: |
      #     cd Firmware/RTK_Surveyor/build/esp32.esp32.esp32/
      #     mv RTK_Surveyor.ino.bin ${{ env.FILENAME_PREFIX }}${{ env.FILE_ENDING_UNDERSCORE }}.bin
